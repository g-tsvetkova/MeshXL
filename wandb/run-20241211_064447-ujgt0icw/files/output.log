Loading train data with 515 files.
Loading test data with 129 files.
Some weights of the model checkpoint at mesh-xl/mesh-xl-125m were not used when initializing OPTForCausalLM: ['dummy']
- This IS expected if you are initializing OPTForCausalLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing OPTForCausalLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of OPTForCausalLM were not initialized from the model checkpoint at mesh-xl/mesh-xl-125m and are newly initialized: ['decoder.embed_positions.weight', 'decoder.embed_tokens.weight', 'decoder.final_layer_norm.bias', 'decoder.final_layer_norm.weight', 'decoder.layers.0.fc1.bias', 'decoder.layers.0.fc1.weight', 'decoder.layers.0.fc2.bias', 'decoder.layers.0.fc2.weight', 'decoder.layers.0.final_layer_norm.bias', 'decoder.layers.0.final_layer_norm.weight', 'decoder.layers.0.self_attn.k_proj.bias', 'decoder.layers.0.self_attn.k_proj.weight', 'decoder.layers.0.self_attn.out_proj.bias', 'decoder.layers.0.self_attn.out_proj.weight', 'decoder.layers.0.self_attn.q_proj.bias', 'decoder.layers.0.self_attn.q_proj.weight', 'decoder.layers.0.self_attn.v_proj.bias', 'decoder.layers.0.self_attn.v_proj.weight', 'decoder.layers.0.self_attn_layer_norm.bias', 'decoder.layers.0.self_attn_layer_norm.weight', 'decoder.layers.1.fc1.bias', 'decoder.layers.1.fc1.weight', 'decoder.layers.1.fc2.bias', 'decoder.layers.1.fc2.weight', 'decoder.layers.1.final_layer_norm.bias', 'decoder.layers.1.final_layer_norm.weight', 'decoder.layers.1.self_attn.k_proj.bias', 'decoder.layers.1.self_attn.k_proj.weight', 'decoder.layers.1.self_attn.out_proj.bias', 'decoder.layers.1.self_attn.out_proj.weight', 'decoder.layers.1.self_attn.q_proj.bias', 'decoder.layers.1.self_attn.q_proj.weight', 'decoder.layers.1.self_attn.v_proj.bias', 'decoder.layers.1.self_attn.v_proj.weight', 'decoder.layers.1.self_attn_layer_norm.bias', 'decoder.layers.1.self_attn_layer_norm.weight', 'decoder.layers.10.fc1.bias', 'decoder.layers.10.fc1.weight', 'decoder.layers.10.fc2.bias', 'decoder.layers.10.fc2.weight', 'decoder.layers.10.final_layer_norm.bias', 'decoder.layers.10.final_layer_norm.weight', 'decoder.layers.10.self_attn.k_proj.bias', 'decoder.layers.10.self_attn.k_proj.weight', 'decoder.layers.10.self_attn.out_proj.bias', 'decoder.layers.10.self_attn.out_proj.weight', 'decoder.layers.10.self_attn.q_proj.bias', 'decoder.layers.10.self_attn.q_proj.weight', 'decoder.layers.10.self_attn.v_proj.bias', 'decoder.layers.10.self_attn.v_proj.weight', 'decoder.layers.10.self_attn_layer_norm.bias', 'decoder.layers.10.self_attn_layer_norm.weight', 'decoder.layers.11.fc1.bias', 'decoder.layers.11.fc1.weight', 'decoder.layers.11.fc2.bias', 'decoder.layers.11.fc2.weight', 'decoder.layers.11.final_layer_norm.bias', 'decoder.layers.11.final_layer_norm.weight', 'decoder.layers.11.self_attn.k_proj.bias', 'decoder.layers.11.self_attn.k_proj.weight', 'decoder.layers.11.self_attn.out_proj.bias', 'decoder.layers.11.self_attn.out_proj.weight', 'decoder.layers.11.self_attn.q_proj.bias', 'decoder.layers.11.self_attn.q_proj.weight', 'decoder.layers.11.self_attn.v_proj.bias', 'decoder.layers.11.self_attn.v_proj.weight', 'decoder.layers.11.self_attn_layer_norm.bias', 'decoder.layers.11.self_attn_layer_norm.weight', 'decoder.layers.2.fc1.bias', 'decoder.layers.2.fc1.weight', 'decoder.layers.2.fc2.bias', 'decoder.layers.2.fc2.weight', 'decoder.layers.2.final_layer_norm.bias', 'decoder.layers.2.final_layer_norm.weight', 'decoder.layers.2.self_attn.k_proj.bias', 'decoder.layers.2.self_attn.k_proj.weight', 'decoder.layers.2.self_attn.out_proj.bias', 'decoder.layers.2.self_attn.out_proj.weight', 'decoder.layers.2.self_attn.q_proj.bias', 'decoder.layers.2.self_attn.q_proj.weight', 'decoder.layers.2.self_attn.v_proj.bias', 'decoder.layers.2.self_attn.v_proj.weight', 'decoder.layers.2.self_attn_layer_norm.bias', 'decoder.layers.2.self_attn_layer_norm.weight', 'decoder.layers.3.fc1.bias', 'decoder.layers.3.fc1.weight', 'decoder.layers.3.fc2.bias', 'decoder.layers.3.fc2.weight', 'decoder.layers.3.final_layer_norm.bias', 'decoder.layers.3.final_layer_norm.weight', 'decoder.layers.3.self_attn.k_proj.bias', 'decoder.layers.3.self_attn.k_proj.weight', 'decoder.layers.3.self_attn.out_proj.bias', 'decoder.layers.3.self_attn.out_proj.weight', 'decoder.layers.3.self_attn.q_proj.bias', 'decoder.layers.3.self_attn.q_proj.weight', 'decoder.layers.3.self_attn.v_proj.bias', 'decoder.layers.3.self_attn.v_proj.weight', 'decode
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
The class `optimum.bettertransformers.transformation.BetterTransformer` is deprecated and will be removed in a future release.
The BetterTransformer implementation does not support padding during training, as the fused kernels do not support attention masks. Beware that passing padded batched data during training may result in unexpected outputs. Please refer to https://huggingface.co/docs/optimum/bettertransformer/overview for more details.
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='objaverse', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='mesh-xl/mesh-xl-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=0, batchsize_per_gpu=4, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='./checkpoints', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
<accelerate.data_loader.DataLoaderShard object at 0x7f490545b280>
<trimesh.Trimesh(vertices.shape=(48, 3), faces.shape=(24, 3))>
<trimesh.Trimesh(vertices.shape=(607, 3), faces.shape=(778, 3))>
<trimesh.Trimesh(vertices.shape=(84, 3), faces.shape=(46, 3))>
<trimesh.Trimesh(vertices.shape=(1470, 3), faces.shape=(798, 3))>
<trimesh.Trimesh(vertices.shape=(768, 3), faces.shape=(384, 3))>
<trimesh.Trimesh(vertices.shape=(952, 3), faces.shape=(480, 3))>
<trimesh.Trimesh(vertices.shape=(432, 3), faces.shape=(96, 3))>
<trimesh.Trimesh(vertices.shape=(788, 3), faces.shape=(764, 3))>
Raw vertices:  tensor([[[-2.4843e-01,  5.0383e-04, -2.9607e-01],
         [-2.4843e-01,  5.0383e-04, -2.9607e-01],
         [-2.4843e-01,  5.0383e-04, -2.9607e-01],
         ...,
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00]],

        [[-6.2771e-01,  4.1989e-02, -2.1110e-01],
         [-6.2771e-01,  4.1989e-02, -2.1110e-01],
         [-6.2771e-01,  4.1989e-02, -2.1110e-01],
         ...,
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00]],

        [[-3.4776e-01, -1.3870e-01, -3.3140e-01],
         [-3.4776e-01, -1.3870e-01, -3.3140e-01],
         [-3.4776e-01, -1.3870e-01, -3.3140e-01],
         ...,
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00]],

        [[ 2.8941e-02,  2.1302e-01, -1.3637e-01],
         [ 2.8941e-02,  2.1302e-01, -1.3637e-01],
         [ 2.8941e-02,  2.1302e-01, -1.3637e-01],
         ...,
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00]]], device='cuda:0')
Raw faces:  tensor([[[ 12,   0,  30],
         [ 12,  30,  42],
         [ 15,  45,  33],
         ...,
         [ -1,  -1,  -1],
         [ -1,  -1,  -1],
         [ -1,  -1,  -1]],

        [[ 78, 123, 122],
         [122,  67,  69],
         [ 69,  71,  73],
         ...,
         [ -1,  -1,  -1],
         [ -1,  -1,  -1],
         [ -1,  -1,  -1]],

        [[  0,   3,  69],
         [ 69,  66,   0],
         [ 55,  31,  28],
         ...,
         [ -1,  -1,  -1],
         [ -1,  -1,  -1],
         [ -1,  -1,  -1]],

        [[683, 497, 390],
         [390, 503, 697],
         [697, 852, 954],
         ...,
         [303, 963, 368],
         [ -1,  -1,  -1],
         [ -1,  -1,  -1]]], device='cuda:0')
Face mask:  tensor([[ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True, False, False]], device='cuda:0')
torch.Size([4, 800, 2000, 3])
torch.Size([4, 800, 3, 3])
max face index: 1469 num_vertices: 800
min face index: 0
Discrete face coordinates:  tensor([[[[ 82,  64,  48],
          [ 48,  64,  45],
          [ 45,  64,  79]],

         [[ 82,  64,  48],
          [ 45,  64,  79],
          [ 79,  64,  82]],

         [[ 82,  99,  48],
          [ 79,  99,  82],
          [ 45,  99,  79]],

         ...,

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]],

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]],

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]]],


        [[[ 62,  69,  52],
          [ 64,  66,  54],
          [ 64,  61,  54]],

         [[ 64,  61,  54],
          [ 62,  61,  52],
          [ 61,  62,  52]],

         [[ 61,  62,  52],
          [ 60,  63,  52],
          [ 59,  64,  52]],

         ...,

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]],

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]],

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]]],


        [[[ 41,  55,  42],
          [ 86,  55,  42],
          [ 86,  55,  85]],

         [[ 86,  55,  85],
          [ 41,  55,  85],
          [ 41,  55,  42]],

         [[ 85,  55,  84],
          [ 85,  55,  43],
          [ 42,  55,  43]],

         ...,

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]],

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]],

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]]],


        [[[ 64, 109,  64],
          [ 64, 110,  62],
          [ 63, 111,  61]],

         [[ 63, 111,  61],
          [ 63, 113,  62],
          [ 63, 114,  64]],

         [[ 63, 114,  64],
          [ 63, 113,  65],
          [ 63, 111,  66]],

         ...,

         [[ 51,  99,  60],
          [ 49, 100,  66],
          [ 49, 100,  61]],

         [[ 65,  77,  55],
          [ 65,  77,  55],
          [ 65,  77,  55]],

         [[ 65,  77,  55],
          [ 65,  77,  55],
          [ 65,  77,  55]]]], device='cuda:0')
Discrete face coordinates:  tensor([[[[ 82,  64,  48],
          [ 48,  64,  45],
          [ 45,  64,  79]],

         [[ 82,  64,  48],
          [ 45,  64,  79],
          [ 79,  64,  82]],

         [[ 82,  99,  48],
          [ 79,  99,  82],
          [ 45,  99,  79]],

         ...,

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]],

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]],

         [[ 48,  64,  45],
          [ 48,  64,  45],
          [ 48,  64,  45]]],


        [[[ 62,  69,  52],
          [ 64,  66,  54],
          [ 64,  61,  54]],

         [[ 64,  61,  54],
          [ 62,  61,  52],
          [ 61,  62,  52]],

         [[ 61,  62,  52],
          [ 60,  63,  52],
          [ 59,  64,  52]],

         ...,

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]],

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]],

         [[ 23,  66,  50],
          [ 23,  66,  50],
          [ 23,  66,  50]]],


        [[[ 41,  55,  42],
          [ 86,  55,  42],
          [ 86,  55,  85]],

         [[ 86,  55,  85],
          [ 41,  55,  85],
          [ 41,  55,  42]],

         [[ 85,  55,  84],
          [ 85,  55,  43],
          [ 42,  55,  43]],

         ...,

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]],

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]],

         [[ 41,  55,  42],
          [ 41,  55,  42],
          [ 41,  55,  42]]],


        [[[ 64, 109,  64],
          [ 64, 110,  62],
          [ 63, 111,  61]],

         [[ 63, 111,  61],
          [ 63, 113,  62],
          [ 63, 114,  64]],

         [[ 63, 114,  64],
          [ 63, 113,  65],
          [ 63, 111,  66]],

         ...,

         [[ 51,  99,  60],
          [ 49, 100,  66],
          [ 49, 100,  61]],

         [[ 65,  77,  55],
          [ 65,  77,  55],
          [ 65,  77,  55]],

         [[ 65,  77,  55],
          [ 65,  77,  55],
          [ 65,  77,  55]]]], device='cuda:0')
Epoch [0/16]; Iter [0/2048]; loss 5.0264; gen_loss 5.0264; LR 1.00e-06; Iter time 2.92s; ETA 1:39:37; Mem 14330.10MB
Traceback (most recent call last):
  File "/root/MeshXL/main.py", line 313, in <module>
    main(args)
  File "/root/MeshXL/main.py", line 303, in main
    do_train(
  File "/root/MeshXL/engine.py", line 120, in do_train
    accelerator.log({"train_loss": {k: v.avg for k, v in loss_break_down_avg.items()}}, step=global_step)
NameError: name 'global_step' is not defined
